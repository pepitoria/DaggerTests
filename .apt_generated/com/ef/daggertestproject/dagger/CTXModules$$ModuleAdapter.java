// Code generated by dagger-compiler.  Do not edit.
package com.ef.daggertestproject.dagger;


import dagger.internal.Binding;
import dagger.internal.ModuleAdapter;
import java.util.Map;
import javax.inject.Provider;

/**
 * A manager of modules and provides adapters allowing for proper linking and
 * instance provision of types served by {@code @Provides} methods.
 */
public final class CTXModules$$ModuleAdapter extends ModuleAdapter<CTXModules> {
  private static final String[] INJECTS = { };
  private static final Class<?>[] STATIC_INJECTIONS = { };
  private static final Class<?>[] INCLUDES = { };

  public CTXModules$$ModuleAdapter() {
    super(INJECTS, STATIC_INJECTIONS, false /*overrides*/, INCLUDES, true /*complete*/, true /*library*/);
  }

  @Override
  public CTXModules newModule() {
    return new com.ef.daggertestproject.dagger.CTXModules();
  }

  /**
   * Used internally obtain dependency information, such as for cyclical
   * graph detection.
   */
  @Override
  public void getBindings(Map<String, Binding<?>> map) {
    map.put("com.ef.daggertestproject.CoolModule", new ProvideCoolModuleProvidesAdapter(module));
  }

  /**
   * A {@code Binder<com.ef.daggertestproject.CoolModule>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Being a {@code Provider<com.ef.daggertestproject.CoolModule>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvideCoolModuleProvidesAdapter extends Binding<com.ef.daggertestproject.CoolModule>
      implements Provider<com.ef.daggertestproject.CoolModule> {
    private final CTXModules module;

    public ProvideCoolModuleProvidesAdapter(CTXModules module) {
      super("com.ef.daggertestproject.CoolModule", null, IS_SINGLETON, "com.ef.daggertestproject.dagger.CTXModules.provideCoolModule()");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<com.ef.daggertestproject.CoolModule>}.
     */
    @Override
    public com.ef.daggertestproject.CoolModule get() {
      return module.provideCoolModule();
    }
  }
}
